#!/bin/zsh

git_main_branch () {
	command git rev-parse --git-dir &> /dev/null || return
	local ref
	for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default,stable,master}
	do
		if command git show-ref -q --verify "$ref"
		then
			echo "${ref:t}"
			return 0
		fi
	done
	echo master
	return 1
}

function cleanup_text() {
  sed $'s/\x1b\\[[0-9;]*[a-zA-Z]//g' |
  sed 's/[⭐🚧⌛👷🔑️💭🧵⏱️🔎🚀📦🏷️👀]//g' |
  sed -E 's/\[38;5;[0-9]+m\[0m(\[38;5;[0-9]+m)?\s*\[38;5;[0-9]+m—+[^—]+—+\[m//g' |
  sed -E 's/[ ]{2,}/ /g'
}

# Prompt templates
TITLE_PROMPT_TEMPLATE='I will provide a git diff. Generate a PR title, following the conventional commit message format (fix, feat, BREAKING CHANGE). The current branch is {CURRENT_BRANCH}.

Format the PR title as:
PR_TYPE({CURRENT_BRANCH}): PR_TITLE

Example:
If the current branch is STD-2, the output should be:
feat(STD-2): Add a new endpoint

Respond with only the PR title, without any additional text.'

DESCRIPTION_PROMPT_TEMPLATE="I will provide git diff and Jira ticket information. Write me a PR description in markdown format.
When writing 'What', group the changes into appropriate categories instead of detailing each change individually and enumerate with '-'.
When writing the 'Why', review the requirements (ticket description) and deduce the necessity of the changes.

PR DESCRIPTION SHOULD BE CONCISE.
FOCUS STRICTLY ON WHAT WAS CHANGED AND WHY IT WAS IMMEDIATELY NECESSARY.
Avoid vague expressions and include only specific content.
Minimize the use of terms like 'enhancement' and 'improvement' without specifying an object.

The PR description must follow the below format. (Refer the example below) DO NOT ADD ANY OTHER H2 SECTIONS

## What
- Add DB_HOST value in config struct
- Change host variable type to string
## Why
To create a new connection to the database

JIRA TICKET INFORMATION:
{JIRA_INFO}"

# Get git diff
DIFF=$(git diff -w --staged origin/"$(git_main_branch)")
# Get git diff excluding mock files and generated files
# DIFF=$(git diff origin/$(git_main_branch) | grep -vE '(go\.sum|_mock\.go|mocks?/|Code generated by)')

# Get Jira ticket information
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ $CURRENT_BRANCH =~ ([A-Za-z]+-[0-9]+) ]]; then
  CURRENT_BRANCH="${match[1]}"
fi

JIRA_INFO=$(jira issue view "$CURRENT_BRANCH" --plain 2>/dev/null || echo "No Jira ticket found for $CURRENT_BRANCH")

JIRA_INFO=$(echo "$JIRA_INFO" | cleanup_text)

# github token
GITHUB_TOKEN=$(gh auth token)

# Replace {CURRENT_BRANCH} with actual branch name
TITLE_PROMPT=$(echo "$TITLE_PROMPT_TEMPLATE" | sed "s/{CURRENT_BRANCH}/$CURRENT_BRANCH/g")

# Replace {JIRA_INFO} with actual Jira ticket information
DESCRIPTION_PROMPT=$(echo "$DESCRIPTION_PROMPT_TEMPLATE" | sed "s|{JIRA_INFO}|$ESCAPED_JIRA_INFO|g")

# Escape the content for JSON
ESCAPED_TITLE_PROMPT=$(echo "$TITLE_PROMPT" | jq -Rsa .)
ESCAPED_DESCRIPTION_PROMPT=$(echo "$DESCRIPTION_PROMPT" | jq -Rsa .)
ESCAPED_DIFF=$(echo "$DIFF" | jq -Rsa .)

# Create JSON payload using jq
TITLE_PAYLOAD=$(jq -n \
  --arg title "$ESCAPED_TITLE_PROMPT" \
  --arg diff "$ESCAPED_DIFF" \
  '{
    model: "gpt-4o-mini",
    messages: [
      {
        role: "system",
        content: $title
      },
      {
        role: "user",
        content: $diff
      }
    ],
    temperature: 0.5
  }')

# Send request to GitHub Copilot API and extract PR title
PR_TITLE=$(curl -s -X POST "https://api.githubcopilot.com/chat/completions" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$TITLE_PAYLOAD" | jq -r '.choices[0].message.content')


# Create JSON payload using jq
# gpt-4o-mini
DESCRIPTION_PAYLOAD=$(jq -n \
  --arg title "$ESCAPED_DESCRIPTION_PROMPT" \
  --arg diff "$ESCAPED_DIFF" \
  '{
    model: "gpt-4o-mini",
    messages: [
      {
        role: "system",
        content: $title
      },
      {
        role: "user",
        content: $diff
      }
    ],
    temperature: 0.5
  }')

# Send request to GitHub Copilot API and extract PR title
PR_DESCRIPTION=$(curl -s -X POST "https://api.githubcopilot.com/chat/completions" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$DESCRIPTION_PAYLOAD" | jq -r '.choices[0].message.content')

# Check if PR exists
EXISTING_PR=$(gh pr list --state open --head "$(git branch --show-current)" --json number -q '.[].number')

if [ -n "$EXISTING_PR" ]; then
    # Update existing PR
    echo "Updating existing PR #$EXISTING_PR..."
    gh pr edit "$EXISTING_PR" --title "$PR_TITLE" --body "$PR_DESCRIPTION"
else
    # Create new PR
    echo "Creating new PR..."
    gh pr create --draft --title "$PR_TITLE" --body "$PR_DESCRIPTION" -a @me --base "$(git_main_branch)" --head "$(git rev-parse --abbrev-ref HEAD)"
fi
